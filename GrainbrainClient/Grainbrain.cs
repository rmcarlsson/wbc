// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grainbrain.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Grpcproto {

  /// <summary>Holder for reflection information generated from grainbrain.proto</summary>
  public static partial class GrainbrainReflection {

    #region Descriptor
    /// <summary>File descriptor for grainbrain.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GrainbrainReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBncmFpbmJyYWluLnByb3RvEglncnBjcHJvdG8aG2dvb2dsZS9wcm90b2J1",
            "Zi9lbXB0eS5wcm90byInChdOZXR3b3JrRGlzY292ZXJ5UmVxdWVzdBIMCgRu",
            "YW1lGAEgASgJIiUKFU5ldHdvcmtEaXNjb3ZlcnlSZXBseRIMCgRuYW1lGAEg",
            "ASgJIh8KEUdyYWluc0FkZGVkTm90aWZ5EgoKAmlkGAEgASgFIh4KEFNwYXJn",
            "ZURvbmVOb3RpZnkSCgoCaWQYASABKAUiLAoeV29ydENoaWxsZXJTYW5pdGl6",
            "ZWREb25lTm90aWZ5EgoKAmlkGAEgASgFImwKDFN1Y2Nlc3NSZXBseRIwCgdz",
            "dWNjZXNzGAEgASgOMh8uZ3JwY3Byb3RvLlN1Y2Nlc3NSZXBseS5TdWNjZXNz",
            "EgsKA21zZxgCIAEoCSIdCgdTdWNjZXNzEgYKAk9LEAASCgoGRkFMSUVEEAEi",
            "UQoPTWFzaFByb2ZpbGVTdGVwEhYKDmhlYXRfb3Zlcl90aW1lGAEgASgFEhMK",
            "C3RlbXBlcmF0dXJlGAIgASgFEhEKCXN0ZXBfdGltZRgDIAEoBSItCg9Ib3BB",
            "ZGRpdGlvblN0ZXASDAoEdGltZRgBIAEoBRIMCgRuYW1lGAIgASgJIqQCCg9C",
            "cmV3U3RhdHVzUmVwbHkSLgoRY3VycmVudF9icmV3X3N0ZXAYASABKA4yEy5n",
            "cnBjcHJvdG8uQnJld1N0ZXASOAoUcmVtYWluaW5nX21hc2hfc3RlcHMYAiAD",
            "KAsyGi5ncnBjcHJvdG8uTWFzaFByb2ZpbGVTdGVwEhgKEG1hc2hfdGVtcGVy",
            "YXR1cmUYAyABKAESIQoZbWFzaF90ZW1wZXJhdHVyZV9zZXRwb2ludBgEIAEo",
            "ARI7ChdyZW1haW5pbmdfaG9wX2FkZGl0aW9ucxgFIAMoCzIaLmdycGNwcm90",
            "by5Ib3BBZGRpdGlvblN0ZXASGwoTcmVtYWluaW5nX2JvaWxfdGltZRgGIAEo",
            "BRIQCghwcm9ncmVzcxgHIAEoBSLPAQoWTG9hZEJyZXdQcm9maWxlUmVxdWVz",
            "dBI2ChJtYXNoX3Byb2ZpbGVfc3RlcHMYASADKAsyGi5ncnBjcHJvdG8uTWFz",
            "aFByb2ZpbGVTdGVwEjUKEWhvcF9hZGRpdGlvbl9zdGVwGAIgAygLMhouZ3Jw",
            "Y3Byb3RvLkhvcEFkZGl0aW9uU3RlcBIRCglib2lsX3RpbWUYAyABKAUSGQoR",
            "bWFzaF93YXRlcl92b2x1bWUYBCABKAESGAoQZ3JhaW5iaWxsX3dlaWdodBgF",
            "IAEoASJ6ChBTdGFydFN0b3BSZXF1ZXN0EjkKCnN0YXJ0X3N0b3AYASABKA4y",
            "JS5ncnBjcHJvdG8uU3RhcnRTdG9wUmVxdWVzdC5TdGFydFN0b3AiKwoJU3Rh",
            "cnRTdG9wEgkKBVNUQVJUEAASCAoEU1RPUBABEgkKBUFCT1JUEAIqhQEKCEJy",
            "ZXdTdGVwEggKBElETEUQABILCgdIRUFUSU5HEAESHQoZU1RSSUtFX1dBVEVS",
            "X1RFTVBfUkVBQ0hFRBACEgsKB01BU0hJTkcQAxIaChZNQVNIX0RPTkVfU1RB",
            "UlRfU1BBUkdFEAQSCwoHQk9JTElORxAFEg0KCUJPSUxfRE9ORRAGMtUDCghN",
            "Y1NlcnZlchJPCg9Mb2FkQnJld1Byb2ZpbGUSIS5ncnBjcHJvdG8uTG9hZEJy",
            "ZXdQcm9maWxlUmVxdWVzdBoXLmdycGNwcm90by5TdWNjZXNzUmVwbHkiABJI",
            "Cg5TdGFydFN0b3BBYm9ydBIbLmdycGNwcm90by5TdGFydFN0b3BSZXF1ZXN0",
            "GhcuZ3JwY3Byb3RvLlN1Y2Nlc3NSZXBseSIAEkUKC0dyYWluc0FkZGVkEhwu",
            "Z3JwY3Byb3RvLkdyYWluc0FkZGVkTm90aWZ5GhYuZ29vZ2xlLnByb3RvYnVm",
            "LkVtcHR5IgASQwoKU3BhcmdlRG9uZRIbLmdycGNwcm90by5TcGFyZ2VEb25l",
            "Tm90aWZ5GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IgASXwoYV29ydENoaWxs",
            "ZXJTYW5pdGl6ZWREb25lEikuZ3JwY3Byb3RvLldvcnRDaGlsbGVyU2FuaXRp",
            "emVkRG9uZU5vdGlmeRoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSIAEkEKCUdl",
            "dFN0YXR1cxIWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eRoaLmdycGNwcm90by5C",
            "cmV3U3RhdHVzUmVwbHkiAEIpChRzZS50cmFudG9yLmdycGNwcm90b0IPR3Jh",
            "aW5icmFpblByb3RvUAFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Grpcproto.BrewStep), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpcproto.NetworkDiscoveryRequest), global::Grpcproto.NetworkDiscoveryRequest.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpcproto.NetworkDiscoveryReply), global::Grpcproto.NetworkDiscoveryReply.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpcproto.GrainsAddedNotify), global::Grpcproto.GrainsAddedNotify.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpcproto.SpargeDoneNotify), global::Grpcproto.SpargeDoneNotify.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpcproto.WortChillerSanitizedDoneNotify), global::Grpcproto.WortChillerSanitizedDoneNotify.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpcproto.SuccessReply), global::Grpcproto.SuccessReply.Parser, new[]{ "Success", "Msg" }, null, new[]{ typeof(global::Grpcproto.SuccessReply.Types.Success) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpcproto.MashProfileStep), global::Grpcproto.MashProfileStep.Parser, new[]{ "HeatOverTime", "Temperature", "StepTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpcproto.HopAdditionStep), global::Grpcproto.HopAdditionStep.Parser, new[]{ "Time", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpcproto.BrewStatusReply), global::Grpcproto.BrewStatusReply.Parser, new[]{ "CurrentBrewStep", "RemainingMashSteps", "MashTemperature", "MashTemperatureSetpoint", "RemainingHopAdditions", "RemainingBoilTime", "Progress" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpcproto.LoadBrewProfileRequest), global::Grpcproto.LoadBrewProfileRequest.Parser, new[]{ "MashProfileSteps", "HopAdditionStep", "BoilTime", "MashWaterVolume", "GrainbillWeight" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpcproto.StartStopRequest), global::Grpcproto.StartStopRequest.Parser, new[]{ "StartStop" }, null, new[]{ typeof(global::Grpcproto.StartStopRequest.Types.StartStop) }, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum BrewStep {
    [pbr::OriginalName("IDLE")] Idle = 0,
    [pbr::OriginalName("HEATING")] Heating = 1,
    [pbr::OriginalName("STRIKE_WATER_TEMP_REACHED")] StrikeWaterTempReached = 2,
    [pbr::OriginalName("MASHING")] Mashing = 3,
    [pbr::OriginalName("MASH_DONE_START_SPARGE")] MashDoneStartSparge = 4,
    [pbr::OriginalName("BOILING")] Boiling = 5,
    [pbr::OriginalName("BOIL_DONE")] BoilDone = 6,
  }

  #endregion

  #region Messages
  public sealed partial class NetworkDiscoveryRequest : pb::IMessage<NetworkDiscoveryRequest> {
    private static readonly pb::MessageParser<NetworkDiscoveryRequest> _parser = new pb::MessageParser<NetworkDiscoveryRequest>(() => new NetworkDiscoveryRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetworkDiscoveryRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpcproto.GrainbrainReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkDiscoveryRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkDiscoveryRequest(NetworkDiscoveryRequest other) : this() {
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkDiscoveryRequest Clone() {
      return new NetworkDiscoveryRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetworkDiscoveryRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetworkDiscoveryRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetworkDiscoveryRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NetworkDiscoveryReply : pb::IMessage<NetworkDiscoveryReply> {
    private static readonly pb::MessageParser<NetworkDiscoveryReply> _parser = new pb::MessageParser<NetworkDiscoveryReply>(() => new NetworkDiscoveryReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetworkDiscoveryReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpcproto.GrainbrainReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkDiscoveryReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkDiscoveryReply(NetworkDiscoveryReply other) : this() {
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkDiscoveryReply Clone() {
      return new NetworkDiscoveryReply(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetworkDiscoveryReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetworkDiscoveryReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetworkDiscoveryReply other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GrainsAddedNotify : pb::IMessage<GrainsAddedNotify> {
    private static readonly pb::MessageParser<GrainsAddedNotify> _parser = new pb::MessageParser<GrainsAddedNotify>(() => new GrainsAddedNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GrainsAddedNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpcproto.GrainbrainReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GrainsAddedNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GrainsAddedNotify(GrainsAddedNotify other) : this() {
      id_ = other.id_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GrainsAddedNotify Clone() {
      return new GrainsAddedNotify(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GrainsAddedNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GrainsAddedNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GrainsAddedNotify other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SpargeDoneNotify : pb::IMessage<SpargeDoneNotify> {
    private static readonly pb::MessageParser<SpargeDoneNotify> _parser = new pb::MessageParser<SpargeDoneNotify>(() => new SpargeDoneNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpargeDoneNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpcproto.GrainbrainReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpargeDoneNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpargeDoneNotify(SpargeDoneNotify other) : this() {
      id_ = other.id_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpargeDoneNotify Clone() {
      return new SpargeDoneNotify(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SpargeDoneNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SpargeDoneNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SpargeDoneNotify other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WortChillerSanitizedDoneNotify : pb::IMessage<WortChillerSanitizedDoneNotify> {
    private static readonly pb::MessageParser<WortChillerSanitizedDoneNotify> _parser = new pb::MessageParser<WortChillerSanitizedDoneNotify>(() => new WortChillerSanitizedDoneNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WortChillerSanitizedDoneNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpcproto.GrainbrainReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WortChillerSanitizedDoneNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WortChillerSanitizedDoneNotify(WortChillerSanitizedDoneNotify other) : this() {
      id_ = other.id_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WortChillerSanitizedDoneNotify Clone() {
      return new WortChillerSanitizedDoneNotify(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WortChillerSanitizedDoneNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WortChillerSanitizedDoneNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WortChillerSanitizedDoneNotify other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SuccessReply : pb::IMessage<SuccessReply> {
    private static readonly pb::MessageParser<SuccessReply> _parser = new pb::MessageParser<SuccessReply>(() => new SuccessReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SuccessReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpcproto.GrainbrainReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SuccessReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SuccessReply(SuccessReply other) : this() {
      success_ = other.success_;
      msg_ = other.msg_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SuccessReply Clone() {
      return new SuccessReply(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private global::Grpcproto.SuccessReply.Types.Success success_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grpcproto.SuccessReply.Types.Success Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 2;
    private string msg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Msg {
      get { return msg_; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SuccessReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SuccessReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (Msg != other.Msg) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != 0) hash ^= Success.GetHashCode();
      if (Msg.Length != 0) hash ^= Msg.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Success);
      }
      if (Msg.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Msg);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Success);
      }
      if (Msg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Msg);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SuccessReply other) {
      if (other == null) {
        return;
      }
      if (other.Success != 0) {
        Success = other.Success;
      }
      if (other.Msg.Length != 0) {
        Msg = other.Msg;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            success_ = (global::Grpcproto.SuccessReply.Types.Success) input.ReadEnum();
            break;
          }
          case 18: {
            Msg = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SuccessReply message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Success {
        [pbr::OriginalName("OK")] Ok = 0,
        [pbr::OriginalName("FALIED")] Falied = 1,
      }

    }
    #endregion

  }

  public sealed partial class MashProfileStep : pb::IMessage<MashProfileStep> {
    private static readonly pb::MessageParser<MashProfileStep> _parser = new pb::MessageParser<MashProfileStep>(() => new MashProfileStep());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MashProfileStep> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpcproto.GrainbrainReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MashProfileStep() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MashProfileStep(MashProfileStep other) : this() {
      heatOverTime_ = other.heatOverTime_;
      temperature_ = other.temperature_;
      stepTime_ = other.stepTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MashProfileStep Clone() {
      return new MashProfileStep(this);
    }

    /// <summary>Field number for the "heat_over_time" field.</summary>
    public const int HeatOverTimeFieldNumber = 1;
    private int heatOverTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeatOverTime {
      get { return heatOverTime_; }
      set {
        heatOverTime_ = value;
      }
    }

    /// <summary>Field number for the "temperature" field.</summary>
    public const int TemperatureFieldNumber = 2;
    private int temperature_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Temperature {
      get { return temperature_; }
      set {
        temperature_ = value;
      }
    }

    /// <summary>Field number for the "step_time" field.</summary>
    public const int StepTimeFieldNumber = 3;
    private int stepTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StepTime {
      get { return stepTime_; }
      set {
        stepTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MashProfileStep);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MashProfileStep other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HeatOverTime != other.HeatOverTime) return false;
      if (Temperature != other.Temperature) return false;
      if (StepTime != other.StepTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HeatOverTime != 0) hash ^= HeatOverTime.GetHashCode();
      if (Temperature != 0) hash ^= Temperature.GetHashCode();
      if (StepTime != 0) hash ^= StepTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeatOverTime != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(HeatOverTime);
      }
      if (Temperature != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Temperature);
      }
      if (StepTime != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(StepTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeatOverTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeatOverTime);
      }
      if (Temperature != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Temperature);
      }
      if (StepTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StepTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MashProfileStep other) {
      if (other == null) {
        return;
      }
      if (other.HeatOverTime != 0) {
        HeatOverTime = other.HeatOverTime;
      }
      if (other.Temperature != 0) {
        Temperature = other.Temperature;
      }
      if (other.StepTime != 0) {
        StepTime = other.StepTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HeatOverTime = input.ReadInt32();
            break;
          }
          case 16: {
            Temperature = input.ReadInt32();
            break;
          }
          case 24: {
            StepTime = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HopAdditionStep : pb::IMessage<HopAdditionStep> {
    private static readonly pb::MessageParser<HopAdditionStep> _parser = new pb::MessageParser<HopAdditionStep>(() => new HopAdditionStep());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HopAdditionStep> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpcproto.GrainbrainReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HopAdditionStep() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HopAdditionStep(HopAdditionStep other) : this() {
      time_ = other.time_;
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HopAdditionStep Clone() {
      return new HopAdditionStep(this);
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 1;
    private int time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HopAdditionStep);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HopAdditionStep other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Time != other.Time) return false;
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Time != 0) hash ^= Time.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Time != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Time);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Time);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HopAdditionStep other) {
      if (other == null) {
        return;
      }
      if (other.Time != 0) {
        Time = other.Time;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Time = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BrewStatusReply : pb::IMessage<BrewStatusReply> {
    private static readonly pb::MessageParser<BrewStatusReply> _parser = new pb::MessageParser<BrewStatusReply>(() => new BrewStatusReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BrewStatusReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpcproto.GrainbrainReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BrewStatusReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BrewStatusReply(BrewStatusReply other) : this() {
      currentBrewStep_ = other.currentBrewStep_;
      remainingMashSteps_ = other.remainingMashSteps_.Clone();
      mashTemperature_ = other.mashTemperature_;
      mashTemperatureSetpoint_ = other.mashTemperatureSetpoint_;
      remainingHopAdditions_ = other.remainingHopAdditions_.Clone();
      remainingBoilTime_ = other.remainingBoilTime_;
      progress_ = other.progress_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BrewStatusReply Clone() {
      return new BrewStatusReply(this);
    }

    /// <summary>Field number for the "current_brew_step" field.</summary>
    public const int CurrentBrewStepFieldNumber = 1;
    private global::Grpcproto.BrewStep currentBrewStep_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grpcproto.BrewStep CurrentBrewStep {
      get { return currentBrewStep_; }
      set {
        currentBrewStep_ = value;
      }
    }

    /// <summary>Field number for the "remaining_mash_steps" field.</summary>
    public const int RemainingMashStepsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Grpcproto.MashProfileStep> _repeated_remainingMashSteps_codec
        = pb::FieldCodec.ForMessage(18, global::Grpcproto.MashProfileStep.Parser);
    private readonly pbc::RepeatedField<global::Grpcproto.MashProfileStep> remainingMashSteps_ = new pbc::RepeatedField<global::Grpcproto.MashProfileStep>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Grpcproto.MashProfileStep> RemainingMashSteps {
      get { return remainingMashSteps_; }
    }

    /// <summary>Field number for the "mash_temperature" field.</summary>
    public const int MashTemperatureFieldNumber = 3;
    private double mashTemperature_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MashTemperature {
      get { return mashTemperature_; }
      set {
        mashTemperature_ = value;
      }
    }

    /// <summary>Field number for the "mash_temperature_setpoint" field.</summary>
    public const int MashTemperatureSetpointFieldNumber = 4;
    private double mashTemperatureSetpoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MashTemperatureSetpoint {
      get { return mashTemperatureSetpoint_; }
      set {
        mashTemperatureSetpoint_ = value;
      }
    }

    /// <summary>Field number for the "remaining_hop_additions" field.</summary>
    public const int RemainingHopAdditionsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Grpcproto.HopAdditionStep> _repeated_remainingHopAdditions_codec
        = pb::FieldCodec.ForMessage(42, global::Grpcproto.HopAdditionStep.Parser);
    private readonly pbc::RepeatedField<global::Grpcproto.HopAdditionStep> remainingHopAdditions_ = new pbc::RepeatedField<global::Grpcproto.HopAdditionStep>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Grpcproto.HopAdditionStep> RemainingHopAdditions {
      get { return remainingHopAdditions_; }
    }

    /// <summary>Field number for the "remaining_boil_time" field.</summary>
    public const int RemainingBoilTimeFieldNumber = 6;
    private int remainingBoilTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RemainingBoilTime {
      get { return remainingBoilTime_; }
      set {
        remainingBoilTime_ = value;
      }
    }

    /// <summary>Field number for the "progress" field.</summary>
    public const int ProgressFieldNumber = 7;
    private int progress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Progress {
      get { return progress_; }
      set {
        progress_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BrewStatusReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BrewStatusReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurrentBrewStep != other.CurrentBrewStep) return false;
      if(!remainingMashSteps_.Equals(other.remainingMashSteps_)) return false;
      if (MashTemperature != other.MashTemperature) return false;
      if (MashTemperatureSetpoint != other.MashTemperatureSetpoint) return false;
      if(!remainingHopAdditions_.Equals(other.remainingHopAdditions_)) return false;
      if (RemainingBoilTime != other.RemainingBoilTime) return false;
      if (Progress != other.Progress) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurrentBrewStep != 0) hash ^= CurrentBrewStep.GetHashCode();
      hash ^= remainingMashSteps_.GetHashCode();
      if (MashTemperature != 0D) hash ^= MashTemperature.GetHashCode();
      if (MashTemperatureSetpoint != 0D) hash ^= MashTemperatureSetpoint.GetHashCode();
      hash ^= remainingHopAdditions_.GetHashCode();
      if (RemainingBoilTime != 0) hash ^= RemainingBoilTime.GetHashCode();
      if (Progress != 0) hash ^= Progress.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurrentBrewStep != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) CurrentBrewStep);
      }
      remainingMashSteps_.WriteTo(output, _repeated_remainingMashSteps_codec);
      if (MashTemperature != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(MashTemperature);
      }
      if (MashTemperatureSetpoint != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(MashTemperatureSetpoint);
      }
      remainingHopAdditions_.WriteTo(output, _repeated_remainingHopAdditions_codec);
      if (RemainingBoilTime != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(RemainingBoilTime);
      }
      if (Progress != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Progress);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurrentBrewStep != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CurrentBrewStep);
      }
      size += remainingMashSteps_.CalculateSize(_repeated_remainingMashSteps_codec);
      if (MashTemperature != 0D) {
        size += 1 + 8;
      }
      if (MashTemperatureSetpoint != 0D) {
        size += 1 + 8;
      }
      size += remainingHopAdditions_.CalculateSize(_repeated_remainingHopAdditions_codec);
      if (RemainingBoilTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RemainingBoilTime);
      }
      if (Progress != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Progress);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BrewStatusReply other) {
      if (other == null) {
        return;
      }
      if (other.CurrentBrewStep != 0) {
        CurrentBrewStep = other.CurrentBrewStep;
      }
      remainingMashSteps_.Add(other.remainingMashSteps_);
      if (other.MashTemperature != 0D) {
        MashTemperature = other.MashTemperature;
      }
      if (other.MashTemperatureSetpoint != 0D) {
        MashTemperatureSetpoint = other.MashTemperatureSetpoint;
      }
      remainingHopAdditions_.Add(other.remainingHopAdditions_);
      if (other.RemainingBoilTime != 0) {
        RemainingBoilTime = other.RemainingBoilTime;
      }
      if (other.Progress != 0) {
        Progress = other.Progress;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            currentBrewStep_ = (global::Grpcproto.BrewStep) input.ReadEnum();
            break;
          }
          case 18: {
            remainingMashSteps_.AddEntriesFrom(input, _repeated_remainingMashSteps_codec);
            break;
          }
          case 25: {
            MashTemperature = input.ReadDouble();
            break;
          }
          case 33: {
            MashTemperatureSetpoint = input.ReadDouble();
            break;
          }
          case 42: {
            remainingHopAdditions_.AddEntriesFrom(input, _repeated_remainingHopAdditions_codec);
            break;
          }
          case 48: {
            RemainingBoilTime = input.ReadInt32();
            break;
          }
          case 56: {
            Progress = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoadBrewProfileRequest : pb::IMessage<LoadBrewProfileRequest> {
    private static readonly pb::MessageParser<LoadBrewProfileRequest> _parser = new pb::MessageParser<LoadBrewProfileRequest>(() => new LoadBrewProfileRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoadBrewProfileRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpcproto.GrainbrainReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadBrewProfileRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadBrewProfileRequest(LoadBrewProfileRequest other) : this() {
      mashProfileSteps_ = other.mashProfileSteps_.Clone();
      hopAdditionStep_ = other.hopAdditionStep_.Clone();
      boilTime_ = other.boilTime_;
      mashWaterVolume_ = other.mashWaterVolume_;
      grainbillWeight_ = other.grainbillWeight_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadBrewProfileRequest Clone() {
      return new LoadBrewProfileRequest(this);
    }

    /// <summary>Field number for the "mash_profile_steps" field.</summary>
    public const int MashProfileStepsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Grpcproto.MashProfileStep> _repeated_mashProfileSteps_codec
        = pb::FieldCodec.ForMessage(10, global::Grpcproto.MashProfileStep.Parser);
    private readonly pbc::RepeatedField<global::Grpcproto.MashProfileStep> mashProfileSteps_ = new pbc::RepeatedField<global::Grpcproto.MashProfileStep>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Grpcproto.MashProfileStep> MashProfileSteps {
      get { return mashProfileSteps_; }
    }

    /// <summary>Field number for the "hop_addition_step" field.</summary>
    public const int HopAdditionStepFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Grpcproto.HopAdditionStep> _repeated_hopAdditionStep_codec
        = pb::FieldCodec.ForMessage(18, global::Grpcproto.HopAdditionStep.Parser);
    private readonly pbc::RepeatedField<global::Grpcproto.HopAdditionStep> hopAdditionStep_ = new pbc::RepeatedField<global::Grpcproto.HopAdditionStep>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Grpcproto.HopAdditionStep> HopAdditionStep {
      get { return hopAdditionStep_; }
    }

    /// <summary>Field number for the "boil_time" field.</summary>
    public const int BoilTimeFieldNumber = 3;
    private int boilTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoilTime {
      get { return boilTime_; }
      set {
        boilTime_ = value;
      }
    }

    /// <summary>Field number for the "mash_water_volume" field.</summary>
    public const int MashWaterVolumeFieldNumber = 4;
    private double mashWaterVolume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MashWaterVolume {
      get { return mashWaterVolume_; }
      set {
        mashWaterVolume_ = value;
      }
    }

    /// <summary>Field number for the "grainbill_weight" field.</summary>
    public const int GrainbillWeightFieldNumber = 5;
    private double grainbillWeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double GrainbillWeight {
      get { return grainbillWeight_; }
      set {
        grainbillWeight_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoadBrewProfileRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoadBrewProfileRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!mashProfileSteps_.Equals(other.mashProfileSteps_)) return false;
      if(!hopAdditionStep_.Equals(other.hopAdditionStep_)) return false;
      if (BoilTime != other.BoilTime) return false;
      if (MashWaterVolume != other.MashWaterVolume) return false;
      if (GrainbillWeight != other.GrainbillWeight) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= mashProfileSteps_.GetHashCode();
      hash ^= hopAdditionStep_.GetHashCode();
      if (BoilTime != 0) hash ^= BoilTime.GetHashCode();
      if (MashWaterVolume != 0D) hash ^= MashWaterVolume.GetHashCode();
      if (GrainbillWeight != 0D) hash ^= GrainbillWeight.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      mashProfileSteps_.WriteTo(output, _repeated_mashProfileSteps_codec);
      hopAdditionStep_.WriteTo(output, _repeated_hopAdditionStep_codec);
      if (BoilTime != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BoilTime);
      }
      if (MashWaterVolume != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(MashWaterVolume);
      }
      if (GrainbillWeight != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(GrainbillWeight);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += mashProfileSteps_.CalculateSize(_repeated_mashProfileSteps_codec);
      size += hopAdditionStep_.CalculateSize(_repeated_hopAdditionStep_codec);
      if (BoilTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BoilTime);
      }
      if (MashWaterVolume != 0D) {
        size += 1 + 8;
      }
      if (GrainbillWeight != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoadBrewProfileRequest other) {
      if (other == null) {
        return;
      }
      mashProfileSteps_.Add(other.mashProfileSteps_);
      hopAdditionStep_.Add(other.hopAdditionStep_);
      if (other.BoilTime != 0) {
        BoilTime = other.BoilTime;
      }
      if (other.MashWaterVolume != 0D) {
        MashWaterVolume = other.MashWaterVolume;
      }
      if (other.GrainbillWeight != 0D) {
        GrainbillWeight = other.GrainbillWeight;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            mashProfileSteps_.AddEntriesFrom(input, _repeated_mashProfileSteps_codec);
            break;
          }
          case 18: {
            hopAdditionStep_.AddEntriesFrom(input, _repeated_hopAdditionStep_codec);
            break;
          }
          case 24: {
            BoilTime = input.ReadInt32();
            break;
          }
          case 33: {
            MashWaterVolume = input.ReadDouble();
            break;
          }
          case 41: {
            GrainbillWeight = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StartStopRequest : pb::IMessage<StartStopRequest> {
    private static readonly pb::MessageParser<StartStopRequest> _parser = new pb::MessageParser<StartStopRequest>(() => new StartStopRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartStopRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpcproto.GrainbrainReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartStopRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartStopRequest(StartStopRequest other) : this() {
      startStop_ = other.startStop_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartStopRequest Clone() {
      return new StartStopRequest(this);
    }

    /// <summary>Field number for the "start_stop" field.</summary>
    public const int StartStopFieldNumber = 1;
    private global::Grpcproto.StartStopRequest.Types.StartStop startStop_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grpcproto.StartStopRequest.Types.StartStop StartStop {
      get { return startStop_; }
      set {
        startStop_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StartStopRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartStopRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StartStop != other.StartStop) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StartStop != 0) hash ^= StartStop.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StartStop != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) StartStop);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StartStop != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) StartStop);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartStopRequest other) {
      if (other == null) {
        return;
      }
      if (other.StartStop != 0) {
        StartStop = other.StartStop;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            startStop_ = (global::Grpcproto.StartStopRequest.Types.StartStop) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the StartStopRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum StartStop {
        [pbr::OriginalName("START")] Start = 0,
        [pbr::OriginalName("STOP")] Stop = 1,
        [pbr::OriginalName("ABORT")] Abort = 2,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
